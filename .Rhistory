makeCacheMatrix <- function(x = matrix()) {
abc<- NULL
set <- fuction(y) {
x<<- y
abc<<- NULL
}
get <-function() x
setinverse <- function(catch) abc <<-catch
getinverse <- function() abc
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
abc <- x$getInverse()
if(!is.null(abc)){
message("getting the cached datas")
return(abc)
}
cba <- x$get()
abc <- solve(cba, ...)
x$setinverse(abc)
abc
}
makeCacheMatrix <- function(x = matrix()) {
abc <- NULL
set <- fuction(y) {
x <<- y
abc <<- NULL
}
get <-function() x
setinverse <- function(catch) abc <<-catch
getinverse <- function() abc
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
abc <- NULL
set <- function(y) {
x <<- y
abc <<- NULL
}
get <-function() x
setinverse <- function(catch) abc <<-catch
getinverse <- function() abc
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
abc <- x$getInverse()
if(!is.null(abc)){
message("getting the cached datas")
return(abc)
}
cba <- x$get()
abc <- solve(cba, ...)
x$setinverse(abc)
abc
}
mat <- matrix(data = c(4, 2, 7, 6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
makeCacheMatrix <- function(x = matrix()) {
abc <- NULL
set <- function(y) {
x <<- y
abc <<- NULL
}
get <-function() x
setinverse <- function(catch) abc <<-catch
getinverse <- function() abc
list(set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
abc <- x$getInverse()
if(!is.null(abc)){
message("getting the cached datas")
return(abc)
}
cba <- x$get()
abc <- solve(cba, ...)
x$setinverse(abc)
abc
}
the_matrix <- makeCacheMatrix(matrix(1:10, 2, 5))
the_matrix$get()
the_matrix$getInverse()
source("ProgrammingAssignment2/cachematrix.R")
the_matrix$get()
the_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
the_matrix$get()
the_matrix$getInverse()
makeCacheMatrix <- function(x = matrix()) {
abc <- NULL
set <- function(y) {
x <<- y
abc <<- NULL
}
get <-function() x
setInverse <- function(catch) abc <<-catch
getInverse <- function() abc
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the matrix.
##If it has already been computed it does not compute again
##All it does is pulls it out of the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
abc <- x$getInverse()
if(!is.null(abc)){
message("getting the cached datas")
return(abc)
}
cba <- x$get()
abc <- solve(cba, ...)
x$setInverse(abc)
abc
}
the_matrix$getInverse()
the_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
the_matrix$get()
the_matrix$getInverse()
cacheSolve(the_Matrix)
cacheSolve(the_Matrix)
cacheSolve(the_matrix)
the_matrix$getInverse()
